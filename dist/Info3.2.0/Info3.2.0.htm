<html>
<head>
  <meta http-equiv=Content-Type content="text/html; charset=utf-8">
  <title>Алгоритмы на графах</title>
  <link rel="stylesheet" type="text/css" href="../style/style.css">
  <script type="text/javascript" src="../sh_main.min.js"></script>
  <script type="text/javascript" src="../sh_pascal.min.js"></script>
  <script type="text/javascript" src="../sh_python.min.js"></script>
  <link type="text/css" rel="stylesheet" href="../style/sh_nedit.css">
  <script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
  </script>
  <script type="text/javascript"
          src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
  </script>
</head>
<body onLoad="sh_highlightDocument();">
<div style="width:80%;">
  <div style="float:right;">
    <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
            codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swfla
sh.cab#version=6,0,0,0" width="100" height="50">
      <param name="movie"
             value="../audio/a_smsqulh3n.swf">
      <param name="bgcolor"
             value="fff">
      <param name="FlashVars"
             value="src=../audio/8016574696f613132301------------ffffff">
      <param
          name="autoplay" value="false">
      <embed src="../audio/a_smsqulh3n.swf"
             bgcolor="fff" width="100" height="70" type="application/x-shockwave-
flash" pluginspage="http://www.macromedia.com/go/getflashplayer"
             FlashVars="src=../audio/8016574696f613132301------------ffffff"></embed>
    </object>
  </div>
</div>

<div id="content" style="width:80%;">
<h1>3.2. Алгоритмы на графах</h1>

<h2>Обход вершин графа</h2>

<h3>Поиск в глубину - ПВГ (Depth-First Search - DFS) </h3>

<p>Метод обхода графа при котором в первую очередь переход делается из последней посещённой вершины (вершины хранятся в
  <strong>стеке</strong>). Обход в глубину получается естественным образов при рекурсивном обходе графа.</p>

<p align="center">Порядок обхода вершин при поиске в глубину</p>

<p align="center"><img src="img/depth-first-tree.png" width="390" height="250" alt="Порядок обхода графа в DFS"></p>

<div align="center">
<pre class="sh_pascal">
const MAX_N = 100; { Макимальное количество верщин }
var
  graph:   array [1..MAX_N, 1..MAX_N] of boolean; { Матрица смежности (есть ли ребро из i в j) }
  visited: array [1..MAX_N] of boolean; { Посещена ли вершина }
 
procedure dfs(v: integer);
var i: integer;
begin
  visited[v] := true; 
  for i := 1 to MAX_N do
    if graph[v, i] and not visited[i] then 
      dfs(i);           
end;

begin
  dfs(start); { start - начальная вершина обхода }
end.</pre>
<h3>Поиск в ширину - ПВШ (Breadth First Search - BFS)</h3>

<p>Метод обхода графа при котором в первую очередь переход делается из первой вершины, из которой мы ещё не ходили
  (вершины хранятся в <strong>очереди</strong>). Обход в глубину получается естественным образов при рекурсивном обходе
  графа.</p>

<p align="center">Порядок обхода вершин при поиске в ширину</p>

<p align="center"><img src="img/breadth-first-tree.png" width="390" height="250" alt="Обход при поиске в ширину"></p>

<p>&nbsp;</p>

<h2>Поиск особых путей в графах</h2>

<h3>Поиск эйлерова цикла в графе</h3>

<p>&nbsp;</p>

<h3>Поиск гамильтонова цикла в графе</h3>

<h2>&nbsp;</h2>

<h2>Топологическая сортировка</h2>

<p>Реализация через DFS.</p>

<h2>Поиск кратчайших путей в графах (объединение разделов по Дейкстре и Флойду)</h2>

<h3>Алгоритм Дейкстры</h3>

<p><strong>Алгоритм Дейкстры (Dijkstra’s algorithm)</strong> —
  алгоритм на графах,
  находящий кратчайшее расстояние от одной из вершин графа до всех остальных.
  Алгоритм работает только для графов без рёбер отрицательного веса (без рёбер с отрицательной &quot;длиной&quot;).</p>

<strong>Примеры формулировки задачи</strong>

<p>Вариант 1. Дана сеть автомобильных дорог, соединяющих города. Некоторые дороги односторонние.
  Найти кратчайшие пути от заданного города до каждого другого города (если двигаться можно только по дорогам).</p>

<p>Вариант 2. Имеется некоторое количество авиарейсов между городами мира,
  для каждого известна стоимость. Стоимость перелёта из A в B может быть не равна стоимости перелёта из B в A.
  Найти маршрут минимальной стоимости (возможно, с пересадками) от Копенгагена до Барнаула.</p>

<p><img src="img/dijksta_anim.gif" alt=""></p>

<p><strong>Идея алгоритма Дейкстры</strong></p>

<p>Алгоритм состоит и 2 повторяющихся шагов:</p>
<ul>
  <li>Добавление новой вершины (&quot;Расти&quot; - GROW)</li>
  <li>&quot;Релаксация&quot;, т.е. пересчёт расстояний до других вершин с учётом добавленной вершины (RELAX).</li>
</ul>
<p>Более подробное описание:</p>

<div class="algo">
<p>Граф $G=(V,E)$, где $V$ - вершины, $E$ - рёбра.</p>

<p>$v_0$ - начальная вершина</p>

<p>$R_i$ - кратчайщее расстояние от $v_0$ до $i$-ой вершины</p>

<p>$v=v_0$</p>

<p>$D = [v_0]$</p>

<p>Повторять</p>

<div class="algo">
  <p><strong>Обозначения:</strong></p>

  <p>Граф $G = (V,E)$, $V$ - вершины, $E$ - рёбра.</p>

  <p>$v_0$ - начальная вершина (от которой мы ищем кратчайшее растояние до всех остальных)</p>

  <p>$R_i$ - известное нам расстояние от вершиеы $v_0$ до вершины $i$-ой.</p>

  <p>$D$ - множество вершин до которыхмы знаем кратчайшее расстояние от $v_0$.</p>

  <p><strong>Инициализация алгоритма:</strong></p>

  <p>$D = \{\}$ - пустое множество.</p>

  <p>$R_{v_0} = 0$ - расстояние от $v_0$ до $v_0$ = 0.</p>

  <p>$v = v_0$ - расти будем от вершины $v$.</p>

  <p><strong>Повторять</strong> (общий шаг алгоритма)</p>

  <div class="alg">
    <p>$GROW(V/D,v)$ - Добавляем вершину $v$ из множества $V/D$ в множество $D$. </p>

    <p>$RELAX(V/D,v)$ - пробегаем достижимые из $v$ вершины до которых мы ещё не знаем кратчайшее расстояние и обновляем
      расстояния $R_i$ от вершины $v$.</p>

    <p>$v$ - вершина с минимальным $R$ из множества $V/D$.</p>
  </div>
  Пока удаётся расти (операция $GROW$ добавляет вершину).
</div>

<p><strong>Алгоритм </strong></p>

<p>Каждой вершине <em>v</em> из <i>V</i> сопоставим значение <em>a[v]</em> — минимальное известное расстояние от этой
  вершины до начальной <em>s</em>.
  Алгоритм работает пошагово — на каждом шаге он рассматривает одну вершину и пытается улучшить текущее расстояние до
  этой вершины.
  Работа алгоритма завершается, когда все вершины посещены, либо когда вычислены расстояния до всех вершин, достижимых
  из начальной.</p>

<p><strong>Инициализация</strong>. Значение <em>a[s]</em> самой начальной вершины полагается равным 0, значение
  остальных вершин —
  бесконечности (в программировании это реализуется присваиванием большого, к примеру, максимально возможного для
  данного типа, значения).
  Это отражает то, что расстояния от <i>s </i>до других вершин пока неизвестны. </p>

<p><strong>Шаг алгоритма</strong>.
  Если все вершины посещены, алгоритм завершается.
  В противном случае, из ещё не посещённых вершин выбирается вершина<i> v</i>, имеющая минимальное расстояние от
  начальной вершины <em>s</em> и добавляется в список посещенных. Эта вершина находится, используя перебор всех
  непосещенных вершин. При этом суммируется расстояние от старта до одной из посещенных вершин <em>u</em> до
  непосещенной <em>v</em>. Для первого шага <em>s</em> - единственная посещенная вершина с расстоянием от старта (то
  есть от себя самой), равным 0.</p>
<pre class="sh_pascal">
const MaxN = 1000; { Максимальное количество вершин }
var 
  a : array [1..MaxN] of extended; { Найденные кратчайшие расстояния }
  b : array [1..MaxN] of boolean; { Вычислено ли кратчайшее расстояние до вершины }
  p : array [1..MaxN,1..MaxN] of extended; { Матрица смежности }
begin
  { До всех вершин расстояние - бесконечность }
  for i := 1 to n do a[i] := Inf;
  a[s] := 0.0; { И только до начальной вершины расстояние 0 }
  for i := 1 to n do b[i] := false; { Ни до одной вершины мы ещё не нашли кратчайшее расстояние }
  j := s; { Добавляемая вершина (стартовая) }
  repeat
    l := j;
    b[l] := True; { Добавили вершину }
    { Оббегаем все вершины смежные с только что добавленной }
    min := Inf; { Будем искать вершину с минимальным расстоянием от стартовой }
    for i := 1 to n do 
      if not b[i] then begin         
        { Если есть путь короче чем известный в i-ую вершину через l-тую, то запоминаем его }  
        if a[i] &lt; a[l] + p[l][i] then a[i] := a[l] + p[l][i];
        { Если расстояние в эту вершину минимально, то запоминаем её как следующий кандидат на добавление }   
        if a[i] < min then begin min := a[i]; j := i; end;
      end;
  until min = Inf;
  for i := 1 to n do
    if a[i] &gt;= Inf then 
      write('-1 ') { Вершины нельзя достичь из начальной }
    else  
      write(a[i],' '); { Расстояние от начальной вершины = a[i] }
 end;
</pre>

<h3>Алгоритм Флойда</h3>

<p>
  <strong>Алгоритм Флойда — Уоршелла</strong> —
  динамический алгоритм для нахождения кратчайших расстояний между всеми вершинами взвешенного ориентированного
  графа. Разработан в 1962 году Робертом Флойдом и Стивеном Уоршеллом.</p>

<p>Пусть вершины графа </span><span
    >&nbsp;</span><span
    >пронумерованы
  от 1 до</span><span style='
'>&nbsp;</span><i><span style='
'>n</span></i><span style='
'>&nbsp;</span><span style='
'>и введено обозначение</span><span style='
'>&nbsp;</span><span
    ><img
    width=27 height=28 id="Рисунок 2"
    src="img/image002.gif" alt="d_{i j}^{k}"></span><span
    >&nbsp;</span><span
    >для длины
    кратчайшего пути от</span><span style='
'>&nbsp;</span><i><span style='
'>i</span></i><span style='
'>&nbsp;</span><span style='
'>до</span><span style='
'>&nbsp;</span><i><span style='
'>j</span></i><span style='
'>, который кроме самих вершин</span><span style='
'>&nbsp;</span><span
    ><img
    width=29 height=18 id="Рисунок 3"
    src="img/image003.gif" alt="i,\; j"></span><span
    >&nbsp;</span><span
    >проходит
      только через вершины</span><span style='
'>&nbsp;</span><span style='
'><img width=49 height=15 id="Рисунок 4"
       src="img/image004.gif" alt="1 \ldots k"></span><span
    >.
        Очевидно, что</span><span style='
'>&nbsp;</span><span style='
'><img width=27 height=28 id="Рисунок 5"
       src="img/image005.gif" alt="d_{i j}^{0}"></span><span
    >&nbsp;-
          длина (вес) ребра</span><span style='
'>&nbsp;</span><span style='
'><img width=48 height=23 id="Рисунок 6"
       src="img/image006.gif" alt="(i,\;j)"></span><span
    >, если
            таковое существует (в противном случае его длина может быть обозначена как</span><span
    >&nbsp;</span><span
    ><img
    width=18 height=10 id="Рисунок 7"
    src="img/image007.gif" alt="\infty"></span><span
    >)</span></p>

<p>Существует два варианта значения <img id="Рисунок 8" src="img/image008.gif"
                                         alt="d_{i j}^{k},\;k \in \mathbb (1,\;\ldots,\;n)">:</p>

<p style='margin-bottom:1.2pt;margin-left:38.4pt;text-indent:
-18.0pt;line-height:18.0pt'><span style='
'>1.<span style='font:7.0pt ""'>&nbsp;&nbsp;&nbsp; </span></span><span
    >Кратчайший
путь между</span><span style='
'>&nbsp;</span><span style='
'><img width=29 height=18 id="Рисунок 9"
       src="img/image003.gif" alt="i,\;j"></span><span
    >&nbsp;</span><span
    >не
проходит через вершину</span><span style='
'>&nbsp;</span><i><span style='
'>k</span></i><span style='
'>, тогда</span><span style='
'>&nbsp;</span><span style='
'><img width=83 height=27 id="Рисунок 10"
       src="img/image009.gif" alt="d_{i j}^{k}=d_{i j}^{k-1}"></span></p>

<p style='margin-bottom:1.2pt;margin-left:38.4pt;text-indent:
-18.0pt;line-height:18.0pt'><span style='
'>2.<span style='font:7.0pt ""'>&nbsp;&nbsp;&nbsp; </span></span><span
    >Существует
более короткий путь между</span><span style='
'>&nbsp;</span><span style='
'><img width=29 height=18 id="Рисунок 11"
       src="img/image003.gif" alt="i,\;j"></span><span
    >,
проходящий через</span><span style='
'>&nbsp;</span><i><span style='
'>k</span></i><span style='
'>, тогда он сначала идёт от</span><span style='
'>&nbsp;</span><i><span
    >i</span></i><span
    >&nbsp;</span><span
    >до</span><span
    >&nbsp;</span><i><span
    >k</span></i><span
    >, а потом
от</span><span style='
'>&nbsp;</span><i><span style='
'>k</span></i><span style='
'>&nbsp;</span><span style='
'>до</span><span style='
'>&nbsp;</span><i><span style='
'>j</span></i><span style='
'>. В этом случае, очевидно,</span><span style='
'>&nbsp;</span><span
    ><img
    width=144 height=27 id="Рисунок 12"
    src="img/image010.gif"
    alt="d_{i j}^{k}=d_{i k}^{k-1} + d_{k j}^{k-1}"></span></p>

<p>Таким образом, для нахождения значения
  функции достаточно выбрать минимум из двух обозначенных значений.</p>

<p>Тогда</span><span style='
'>&nbsp;</span><span
    ><a
    href="http://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D1%8F"
    title=Рекурсия><span style='color:#0645AD'>рекуррентная</span></a></span><span
    >&nbsp;</span><span
    >формула
для</span><span style='
'>&nbsp;</span><span style='
'><img border=0 width=21 height=27 id="Рисунок 13"
       src="img/image011.gif" alt="d_{i j}^k"></span><span
    >&nbsp;</span><span
    >имеет
вид:</span></p>

<p style='
'><span style='font-family:
"Arial","sans-serif";'><img border=0 width=21 height=26
                            id="Рисунок 14" src="img/image012.gif" alt="d_{i j}^0"></span><span
    >&nbsp;-
длина ребра</span><span style='
'>&nbsp;</span><span style='
'><img border=0 width=48 height=23 id="Рисунок 15"
       src="img/image006.gif" alt="(i,\;j)"></span></p>

<p style='
'><img border=0 width=243 height=27
       id="Рисунок 16" src="img/image013.gif"
       alt="d_{i j}^{k} = \min (d_{i j}^{k-1},\; d_{i k}^{k-1} + d_{k j}^{k-1})"></span></p>

<p style='
'>Алгоритм Флойда&nbsp;- Уоршелла
  последовательно вычисляет все значения</span><span style='
'>&nbsp;</span><span
      ><img
      border=0 width=27 height=28 id="Рисунок 17"
      src="img/image002.gif" alt="d_{i j}^{k}"></span><span
      >,</span><span
      >&nbsp;</span><span
      ><img
      border=0 width=40 height=19 id="Рисунок 18"
      src="img/image014.gif" alt="\forall i,\; j"></span><span
      >&nbsp;</span><span
      >для</span><span
      >&nbsp;</span><i><span
      >k</span></i><span
      >&nbsp;</span><span
      >от 1 до</span><span
      >&nbsp;</span><i><span
      >n</span></i><span
      >.
Полученные значения</span><span>&nbsp;</span><span style='
'><img border=0 width=21 height=23 id="Рисунок 19"
       src="img/image015.gif" alt="d_{i j}^{n}"></span><span
      >&nbsp;</span><span
      >являются
длинами кратчайших путей между вершинами</span><span style='
'>&nbsp;</span><span
      ><img
      border=0 width=29 height=18 id="Рисунок 20"
      src="img/image003.gif" alt="i,\; j"></span><span
      >.</span></p>
<pre class="sh_pascal">
for k := 1 to n do 
  for i := 1 to n do 
    <strong>for</strong> j := 1 <strong>to</strong> n do 
      W[i][j] = min(W[i][j], W[i][k] + W[k][j]);
</pre>
</div>

</body>

</html>